#version 430
		
//#extension GL_ARB_shader_storage_buffer_object : require
		
const float PI = 3.14159265358979;
const float FLT_EPSILON = 0.0000001192092896;
		
uniform int LongitudeSlice;
uniform int LatitudeSlice;
uniform float LongitudeOverlap;
uniform float StartAngle;
uniform float CylinderHeight;
uniform float Radius;
uniform float TotalFOV;
		
struct PlaneFunc{
	vec3 normal;
	vec3 point;
};
		
struct ProxyPlane{
	PlaneFunc func;
	vec3 boundary[4];
};
		
layout (std430, binding = 0) buffer BufferObject {
	ProxyPlane planes[];
};
		
in vec2 tex_coord;
		
layout (location = 0) out vec4 U1;
layout (location = 1) out vec4 V1;
layout (location = 2) out vec4 A1;
layout (location = 3) out vec4 U2;
layout (location = 4) out vec4 V2;
layout (location = 5) out vec4 A2;
		
struct IntersectionResult{
	bool intersected;
	vec2 uv;
};
		
IntersectionResult getSliceIntersection(int idx, vec3 p)
{
	IntersectionResult res;
	vec3 eye = vec3(0.0, 0.0, 0.0);
	vec3 dir = p - eye;
		
	PlaneFunc pf = planes[idx].func;
		
	float d = dot(pf.normal, eye - pf.point);
	float rl = -dot(pf.normal, dir);
		
	float t = d / rl;
		
	vec3 r = eye + (dir * t);
		
	vec3 glb = planes[idx].boundary[0];
	vec3 glt = planes[idx].boundary[1];
	vec3 grb = planes[idx].boundary[2];
	vec3 grt = planes[idx].boundary[3];
		
	vec3 vX = grb - glb;
	vec3 vY = glt - glb;
	float dotX = dot(vX, vX);
	float dotY = dot(vY, vY);
		
	vec3 vP = r - glb;
	float dotPX = dot(vP, vX);
	float dotPY = dot(vP, vY);
		
	float u = dotPX / dotX;
	float v = dotPY / dotY;
		
	res.intersected = (u >= (0.0 - FLT_EPSILON) && u <= (1.0 + FLT_EPSILON)) && (v >= (0.0 - FLT_EPSILON) && v <= (1.0 + FLT_EPSILON));
		
	u = clamp(u, 0.0, 1.0);
	v = clamp(v, 0.0, 1.0);
	res.uv.x = u;
	res.uv.y = v;
		
	return res;
}
		
vec4 GetPixelData(float data) {
	int fi = int(data * 10000000.0);
		
	int b[4];
		
	b[3] = fi % 10;
	fi = fi / 10;
	b[2] = fi % 100;
	fi = fi / 100;
	b[1] = fi % 100;
	fi = fi / 100;
	b[0] = fi % 100;
		
	float f[4];
		
	f[0] = b[0] / 255.0;
	f[1] = b[1] / 255.0;
	f[2] = b[2] / 255.0;
	f[3] = b[3] / 255.0;
		
	vec4 res = vec4(f[0], f[1], f[2], f[3]);
	return res;
}
		
void main(void)
{
	float perFOV = TotalFOV / LongitudeSlice;
	float sideU = 1.0 / LongitudeSlice;
	float sideV = 1.0 / LatitudeSlice;
	float u = tex_coord.x;
	float v = tex_coord.y;
	int sideUIdx = int(u / sideU);
	int sideVIdx = int(v / sideV);
	float offsetX = (u - (sideU * sideUIdx)) / sideU;
	float offsetY = v;
	bool overlappedL = false;
	bool overlappedR = false;
	if (offsetX * perFOV < LongitudeOverlap) {
		overlappedL = true;
	}
	else if (offsetX * perFOV >(perFOV - LongitudeOverlap)) {
		overlappedR = true;
	}
		
	vec3 pointOnCylinder = vec3(0.0, (v - 0.5) * CylinderHeight, 0.0);
	float rAngle = StartAngle + u * TotalFOV;
	float rRadian = radians(rAngle);
	pointOnCylinder.x = -Radius * cos(rRadian);
	pointOnCylinder.z = -Radius * sin(rRadian);
		
	float finalU1 = 0.0;
	float finalV1 = 0.0;
	float finalA1 = 0.0;
	float finalU2 = 0.0;
	float finalV2 = 0.0;
	float finalA2 = 0.0;
		
	bool intersected = true;
	if (overlappedL) {
		int sideUIdx1 = sideUIdx;
		int sideUIdx2 = sideUIdx - 1;
		if (sideUIdx1 == 0) {
			if (TotalFOV >= 360.0 - LongitudeOverlap - FLT_EPSILON) {
				sideUIdx2 = LongitudeSlice - 1;
			}
			else {
				sideUIdx2 = 0;
			}
		}
		
		int idx1 = LatitudeSlice * sideUIdx1 + sideVIdx;
		int idx2 = LatitudeSlice * sideUIdx2 + sideVIdx;
		
		IntersectionResult r1 = getSliceIntersection(idx1, pointOnCylinder);
		IntersectionResult r2 = getSliceIntersection(idx2, pointOnCylinder);
		if (!(r1.intersected && r2.intersected)) {
			intersected = false;
		}
		else {
			finalU1 = (sideU * sideUIdx1) + (r1.uv.x / LongitudeSlice);
			finalV1 = (sideV * sideVIdx) + (r1.uv.y / LatitudeSlice);
		
			finalU2 = (sideU * sideUIdx2) + (r2.uv.x / LongitudeSlice);
			finalV2 = (sideV * sideVIdx) + (r2.uv.y / LatitudeSlice);
		
			finalA1 = (offsetX * perFOV + LongitudeOverlap) / (LongitudeOverlap * 2.0);
			finalA2 = 1.0 - finalA1;
		}
	}
	else if (overlappedR) {
		int sideUIdx1 = sideUIdx;
		int sideUIdx2 = sideUIdx + 1;
		if (sideUIdx1 == LongitudeSlice - 1) {
			if (TotalFOV >= 360.0 - LongitudeOverlap - FLT_EPSILON) {
				sideUIdx2 = 0;
			}
			else {
				sideUIdx2 = LongitudeSlice - 1;
			}
		}
		
		int idx1 = LatitudeSlice * sideUIdx1 + sideVIdx;
		int idx2 = LatitudeSlice * sideUIdx2 + sideVIdx;
		
		IntersectionResult r1 = getSliceIntersection(idx1, pointOnCylinder);
		IntersectionResult r2 = getSliceIntersection(idx2, pointOnCylinder);
		if (!(r1.intersected && r2.intersected)) {
			intersected = false;
		}
		else {
			finalU1 = (sideU * sideUIdx1) + (r1.uv.x / LongitudeSlice);
			finalV1 = (sideV * sideVIdx) + (r1.uv.y / LatitudeSlice);
		
			finalU2 = (sideU * sideUIdx2) + (r2.uv.x / LongitudeSlice);
			finalV2 = (sideV * sideVIdx) + (r2.uv.y / LatitudeSlice);
		
			finalA1 = (((1.0 - offsetX) * perFOV) + LongitudeOverlap) / (LongitudeOverlap * 2.0);
			finalA2 = 1.0 - finalA1;
		}
	}
	else {
		int idx = LatitudeSlice * sideUIdx + sideVIdx;
		IntersectionResult r = getSliceIntersection(idx, pointOnCylinder);
		if (!r.intersected) {
			intersected = false;
		}
		else {
			finalU1 = finalU2 = (sideU * sideUIdx) + (r.uv.x / LongitudeSlice);
			finalV1 = finalV2 = (sideV * sideVIdx) + (r.uv.y / LatitudeSlice);
		
			finalA1 = finalA2 = 0.5;
		}
	}
		
	if (!intersected) {
		finalU1 = 2.0;
		finalV1 = 2.0;
		finalA1 = 2.0;
		finalU2 = 2.0;
		finalV2 = 2.0;
		finalA2 = 2.0;
	}
		
	U1 = GetPixelData(finalU1);
	V1 = GetPixelData(finalV1);
	A1 = GetPixelData(finalA1);
	U2 = GetPixelData(finalU2);
	V2 = GetPixelData(finalV2);
	A2 = GetPixelData(finalA2);
		
}